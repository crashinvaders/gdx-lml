buildscript {
  repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'nebula.provided-base'

  ext {
    projectVersion = '1.10'
    gdxVersion = '1.11.0'
    isSnapshot = true
    libVersion = "$projectVersion.$gdxVersion${isSnapshot ? '-SNAPSHOT' : ''}"
  }
}

/** Checks if the property exists and if not tries to resolve it from the environment variable. */
void resolveProperty(String propertyName, String envVariableName) {
  if (!project.hasProperty(propertyName)) {
    project.ext.propertyName = System.getenv(envVariableName)
    if (!project.ext.propertyName) {
      println "$propertyName is not defined"
    } else {
      println "$propertyName has been set from an environment variable."
    }
  }
}
// Setup Nexus repo credentials.
// They usually defined in user global gradle.properties file
// or as environment variables (Travis-CI).
resolveProperty('ossrhUsername', 'OSSRH_USERNAME')
resolveProperty('ossrhPassword', 'OSSRH_PASSWORD')

def libModules = subprojects - project(':autumn:natives') - project(':websocket:natives')

configure(libModules) {
  apply plugin: 'java-library'
  apply plugin: 'maven'
  apply plugin: 'signing'

  ext {
    wagonVersion = '2.10'
    junitVersion = '4.12'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
  }

  sourceCompatibility = 1.7
  targetCompatibility = 1.7
  group = 'com.crashinvaders.lml'
  version = libVersion
  archivesBaseName = projectName
  eclipse.project.name = projectName

  configurations {
    deployerJars
  }

  dependencies {
    provided "com.badlogicgames.gdx:gdx:$gdxVersion"
    testCompile "junit:junit:$junitVersion"
    deployerJars "org.apache.maven.wagon:wagon-ssh:$wagonVersion"
    deployerJars "org.apache.maven.wagon:wagon-http:$wagonVersion"
  }

  jar {
    from project.sourceSets.main.output
    from(project.sourceSets.main.allSource) {
      include '**/*.xml'
    }
    baseName = archivesBaseName
  }

  task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
  }

  signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name = projectName
          packaging 'jar'
          description = projectDesc
          url 'http://github.com/crashinvaders/gdx-lml'

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          scm {
            connection 'scm:git:git@github.com:crashinvaders/gdx-lml.git'
            developerConnection 'scm:git:git@github.com:crashinvaders/gdx-lml.git'
            url 'http://github.com/crashinvaders/gdx-lml'
          }

          developers {
            developer {
              id 'metaphore'
              name 'Anton Chekulaev'
              email 'metaphore@crashinvaders.com'
            }
            developer {
              id 'mj'
              name 'MJ'
              email 'john.hervicc@gmail.com'
            }
          }
        }
      }
    }
  }

  // Invokes uploadArchives task if the version is a snapshot.
  task uploadSnapshotArchives() {
    if (!isSnapshot) {
      return;
    }
    dependsOn 'build'
    dependsOn 'uploadArchives'
  }
}

task publishAll {
  group 'gdx-lml'
  description 'Publish all the Maven artifacts to the public repos.'

  libModules.forEach {project ->
    dependsOn project.build
    dependsOn project.uploadArchives
  }
}

task publishAllSnapshots {
  group 'gdx-lml'
  description 'Publish all the Maven artifacts to the public repos.' +
          'This task will only be execute if the current version is a snapshot.'

  libModules.forEach {project ->
    dependsOn project.build
    dependsOn project.uploadSnapshotArchives
  }
}

task installAll {
  group 'gdx-lml'
  description 'Installes all the Maven artifacts to the local Maven repo.'

  libModules.forEach {project ->
    dependsOn project.build
    dependsOn project.install
  }
}

tasks.eclipse.doLast {
  delete ".project"
  delete ".classpath"
  delete ".settings/"
}
